#!/usr/bin/env python
  
import argparse
import json

from pyunifi.controller import Controller

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--controller', default='unifi', help='the controller address (default "unifi")')
parser.add_argument('-u', '--username', default='admin', help='the controller username (default("admin")')
parser.add_argument('-p', '--password', default='', help='the controller password')
parser.add_argument('-b', '--port', default='8443', help='the controller port (default "8443")')
parser.add_argument('-v', '--version', default='v5', help='the controller base version (default "v5")')
parser.add_argument('-s', '--siteid', default='default', help='the source site ID, (default "default")')
parser.add_argument('-S', '--siteid2', default='', help='the destination site ID, to copy to')
parser.add_argument('-V', '--no-ssl-verify', default=False, action='store_true', help='Don\'t verify ssl certificates')
parser.add_argument('-C', '--certificate', default='', help='verify with ssl certificate pem file')
args = parser.parse_args()

ssl_verify = (not args.no_ssl_verify)

if ssl_verify and len(args.certificate) > 0:
        ssl_verify = args.certificate
        
controller_source = Controller(args.controller, args.username, args.password, args.port, args.version, args.siteid,  ssl_verify=ssl_verify)
controller_dest   = Controller(args.controller, args.username, args.password, args.port, args.version, args.siteid2, ssl_verify=ssl_verify)

source_users = controller_source.get_radius_users()
dest_users = controller_dest.get_radius_users()

# remove irrelevent fields
for user in source_users:
        user.pop("site_id", None)
        user.pop("vlan", None)
        user.pop("tunnel_type", None)
        user.pop("tunnel_medium_type", None)
for user in dest_users:
        user.pop("site_id", None)
        user.pop("vlan", None)
        user.pop("tunnel_type", None)
        user.pop("tunnel_medium_type", None)


unchanged_users = []
modified_users = []

for source_user in source_users:
        for dest_user in dest_users:
                if source_user['name'] == dest_user['name']:
                        # usernames are the same
                        if source_user['x_password'] == dest_user['x_password']:
                                # password has not changed
                                unchanged_users.append (source_user)
                        else:
                                # password has changed
                                modified_users.append (source_user)

print("source_users\n", json.dumps(source_users, indent=2, sort_keys=False), "\n")
print("dest_users\n", json.dumps(dest_users, indent=2, sort_keys=False), "\n")
print("unchanged_users\n", json.dumps(unchanged_users, indent=2, sort_keys=False), "\n")
print("modified_users\n", json.dumps(modified_users, indent=2, sort_keys=False), "\n")

